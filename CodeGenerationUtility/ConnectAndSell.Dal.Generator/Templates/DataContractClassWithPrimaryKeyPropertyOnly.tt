<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

using System;
using ConnectAndSell.DataAccessStandard.Common.DataContract;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace <#=DataContextGeneratorParams.ProjectDataContractNameSpace#>
{
[DataContract(Namespace ="")]
public sealed class <#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> : IPrimaryKeyBase<<#=TableDataContractMetaInfo.TableClassName#>>, IEquatable<<#=TableDataContractMetaInfo.TablePrimaryKeyClassName#>>
{
<#=TableDataContractMetaInfo.PrimaryColumnPropertiesText#>
public <#=TableDataContractMetaInfo.TablePrimaryKeyClassName#>(<#=TableDataContractMetaInfo.TablePrimaryKeyArgumentCommaSeparated#>)
{
	<#=TableDataContractMetaInfo.TablePrimaryKeyPropertyAssignment#>
}
private <#=TableDataContractMetaInfo.TablePrimaryKeyClassName#>()
{
}

public bool Equals(<#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> other)
{
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return <#=TableDataContractMetaInfo.GetPrimaryKeyEqualityCheckString("other")#>;
}

public override bool Equals(object obj)
{
        return ReferenceEquals(this, obj) || obj is <#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> other && Equals(other);
}

public override int GetHashCode()
{
    <#=TableDataContractMetaInfo.GetHashCodeComputeCodeText()#>
}

public static bool operator ==(<#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> left, <#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> right)
{
        return Equals(left, right);
}

public static bool operator !=(<#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> left, <#=TableDataContractMetaInfo.TablePrimaryKeyClassName#> right)
{
 return !Equals(left, right);
}

}

}